---
- hosts: proxmox
  gather_facts: False
  vars:
    id_list:
        - "{{ k8s_master1_id }}"
        - "{{ k8s_node1_id }}"
        - "{{ k8s_node2_id }}"
        - "{{ k8s_node3_id }}"      
    id_stg_list:
        - { id: "{{ k8s_master1_id }}", stg: "{{ k8s_master1_stg }}" }
        - { id: "{{ k8s_node1_id }}", stg: "{{ k8s_node1_stg }}" }
        - { id: "{{ k8s_node2_id }}", stg: "{{ k8s_node2_stg }}" }
        - { id: "{{ k8s_node3_id }}", stg: "{{ k8s_node3_stg }}" }      
  tasks:

      - name: Creating a resource pool.
        shell: pvesh create /pools -poolid "{{ k8s_resource_pool }}" --Comment "Kubernetes Cluster"
        ignore_errors: yes

      - name: Downloading the Debian qcow2 image.
        get_url:
            url: "{{ img_image }}"
            dest: "{{ img_download_location }}image.img"

      - name: Copy host ssh key
        copy:
          src: ~/.ssh/id_rsa.pub
          dest: /root/.ssh/id_rsa_main.pub
          owner: root
          group: root
          mode: '0644'

      - name: Including the variables.
        include_vars:
            file: ../../vars.yml
            
      - name: Creating the VMs.
        shell: >
            qm create {{ item.id }}
            --pool {{ k8s_resource_pool }}
            --ostype "l26"
            --name {{ item.hn }}
            --description "Kubernetes VM"
            --agent 1
            --cores {{ item.cpu }}
            --memory {{ item.mem }} 
            --net0 "virtio,bridge=vmbr0"
            --ipconfig0 "gw={{ item.gw }},ip={{ item.ip }}{{ item.sn }}"
            --nameserver {{ item.ns }}
            --searchdomain {{ item.sd }}
            --sshkeys "{{ k8s_ssh_key }}"

        with_items: 
            - { id: "{{ k8s_master1_id }}", hn: "{{ k8s_master1_hn }}", cpu: "{{ k8s_master1_cpu }}", mem: "{{ k8s_master1_mem }}", gw: "{{ k8s_master1_gw }}", ip: "{{ k8s_master1_ip }}", sn: "{{ k8s_master1_sn }}", ns: "{{ k8s_master1_ns }}", sd: "{{ k8s_master1_sd }}" }
            - { id: "{{ k8s_node1_id }}", hn: "{{ k8s_node1_hn }}", cpu: "{{ k8s_node1_cpu }}", mem: "{{ k8s_node1_mem }}", gw: "{{ k8s_node1_gw }}", ip: "{{ k8s_node1_ip }}", sn: "{{ k8s_node1_sn }}", ns: "{{ k8s_node1_ns }}", sd: "{{ k8s_node1_sd }}" }
            - { id: "{{ k8s_node2_id }}", hn: "{{ k8s_node2_hn }}", cpu: "{{ k8s_node2_cpu }}", mem: "{{ k8s_node2_mem }}", gw: "{{ k8s_node2_gw }}", ip: "{{ k8s_node2_ip }}", sn: "{{ k8s_node2_sn }}", ns: "{{ k8s_node2_ns }}", sd: "{{ k8s_node2_sd }}" }
            - { id: "{{ k8s_node3_id }}", hn: "{{ k8s_node3_hn }}", cpu: "{{ k8s_node3_cpu }}", mem: "{{ k8s_node3_mem }}", gw: "{{ k8s_node3_gw }}", ip: "{{ k8s_node3_ip }}", sn: "{{ k8s_node3_sn }}", ns: "{{ k8s_node3_ns }}", sd: "{{ k8s_node3_sd }}" }

      - name: Importing the img image as a disk.
        shell: qm importdisk {{ item.id }} {{ img_download_location }}image.img {{ item.stg }}
        with_items: "{{ id_stg_list }}"

      - name: Configuring the VM Hardware.
        shell: qm set {{ item.id }}
               --scsihw virtio-scsi-pci
               --scsi0 {{ item.stg }}:vm-{{ item.id }}-disk-0
               --ide2 {{ item.stg }}:cloudinit
               --serial0 /dev/tty0
               --boot c --bootdisk scsi0
        with_items: "{{ id_stg_list }}"

      - name: Resizing the disk. 
        shell: qm resize {{ item.id }} scsi0 {{ item.size }}
        with_items: 
            - { id: "{{ k8s_master1_id }}", size: "{{ k8s_master1_size }}" }
            - { id: "{{ k8s_node1_id }}", size: "{{ k8s_node1_size }}" }
            - { id: "{{ k8s_node2_id }}", size: "{{ k8s_node2_size }}" }
            - { id: "{{ k8s_node3_id }}", size: "{{ k8s_node3_size }}" }
        ignore_errors: yes

      - name: Waiting 60 seconds for the disks to provision.
        pause:
            seconds: 60

      - name: Set secondary key
        shell: >
            qm set {{ item.id }} --sshkeys "{{ k8s_ssh_key_host }}"
        with_items: 
            - { id: "{{ k8s_master1_id }}", hn: "{{ k8s_master1_hn }}", cpu: "{{ k8s_master1_cpu }}", mem: "{{ k8s_master1_mem }}", gw: "{{ k8s_master1_gw }}", ip: "{{ k8s_master1_ip }}", sn: "{{ k8s_master1_sn }}", ns: "{{ k8s_master1_ns }}", sd: "{{ k8s_master1_sd }}" }
            - { id: "{{ k8s_node1_id }}", hn: "{{ k8s_node1_hn }}", cpu: "{{ k8s_node1_cpu }}", mem: "{{ k8s_node1_mem }}", gw: "{{ k8s_node1_gw }}", ip: "{{ k8s_node1_ip }}", sn: "{{ k8s_node1_sn }}", ns: "{{ k8s_node1_ns }}", sd: "{{ k8s_node1_sd }}" }
            - { id: "{{ k8s_node2_id }}", hn: "{{ k8s_node2_hn }}", cpu: "{{ k8s_node2_cpu }}", mem: "{{ k8s_node2_mem }}", gw: "{{ k8s_node2_gw }}", ip: "{{ k8s_node2_ip }}", sn: "{{ k8s_node2_sn }}", ns: "{{ k8s_node2_ns }}", sd: "{{ k8s_node2_sd }}" }
            - { id: "{{ k8s_node3_id }}", hn: "{{ k8s_node3_hn }}", cpu: "{{ k8s_node3_cpu }}", mem: "{{ k8s_node3_mem }}", gw: "{{ k8s_node3_gw }}", ip: "{{ k8s_node3_ip }}", sn: "{{ k8s_node3_sn }}", ns: "{{ k8s_node3_ns }}", sd: "{{ k8s_node3_sd }}" }
        
      - name: Set password
        shell: >
            qm set {{ item.id }} --cipassword password
        with_items: 
            - { id: "{{ k8s_master1_id }}", hn: "{{ k8s_master1_hn }}", cpu: "{{ k8s_master1_cpu }}", mem: "{{ k8s_master1_mem }}", gw: "{{ k8s_master1_gw }}", ip: "{{ k8s_master1_ip }}", sn: "{{ k8s_master1_sn }}", ns: "{{ k8s_master1_ns }}", sd: "{{ k8s_master1_sd }}" }
            - { id: "{{ k8s_node1_id }}", hn: "{{ k8s_node1_hn }}", cpu: "{{ k8s_node1_cpu }}", mem: "{{ k8s_node1_mem }}", gw: "{{ k8s_node1_gw }}", ip: "{{ k8s_node1_ip }}", sn: "{{ k8s_node1_sn }}", ns: "{{ k8s_node1_ns }}", sd: "{{ k8s_node1_sd }}" }
            - { id: "{{ k8s_node2_id }}", hn: "{{ k8s_node2_hn }}", cpu: "{{ k8s_node2_cpu }}", mem: "{{ k8s_node2_mem }}", gw: "{{ k8s_node2_gw }}", ip: "{{ k8s_node2_ip }}", sn: "{{ k8s_node2_sn }}", ns: "{{ k8s_node2_ns }}", sd: "{{ k8s_node2_sd }}" }
            - { id: "{{ k8s_node3_id }}", hn: "{{ k8s_node3_hn }}", cpu: "{{ k8s_node3_cpu }}", mem: "{{ k8s_node3_mem }}", gw: "{{ k8s_node3_gw }}", ip: "{{ k8s_node3_ip }}", sn: "{{ k8s_node3_sn }}", ns: "{{ k8s_node3_ns }}", sd: "{{ k8s_node3_sd }}" }

      - name: Starting the VMs.
        shell: qm start {{ item }}
        with_items: "{{ id_list }}"

      - name: Check if there are any previous entries in resolv.conf
        find:
          paths: /etc/resolv.conf
          patterns: '^nameserver ([0-9]{1,3}\.){1,3}[0-9]{1,3}$'
        register: found_previous
        
      - name: Stopping the VMs.
        shell: qm stop {{ item }}
        with_items: "{{ id_list }}"

      - name: Starting the VMs.
        shell: qm start {{ item }}
        with_items: "{{ id_list }}"

      - name: Waiting 90 seconds for for Debian to finish booting.
        pause:
            seconds: 90
